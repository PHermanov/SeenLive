// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeenLive.EfCore.Contexts;

#nullable disable

namespace SeenLive.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220611072523_seed-events")]
    partial class seedevents
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BandEntityEventEntity", b =>
                {
                    b.Property<int>("BandsId")
                        .HasColumnType("integer");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("BandsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("BandEntityEventEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeenLive.Bands.BandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternativeNames")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Bands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Info = "Sweden",
                            Name = "Clawfinger"
                        },
                        new
                        {
                            Id = 2,
                            Info = "Ukraine",
                            Name = "Брати Гадюкіни"
                        },
                        new
                        {
                            Id = 3,
                            Info = "USA",
                            Name = "Anti-Flag"
                        },
                        new
                        {
                            Id = 4,
                            AlternativeNames = "Ляпіс Трубецкой",
                            Info = "Belarus",
                            Name = "Ляпис Трубецкой"
                        },
                        new
                        {
                            Id = 5,
                            Info = "Russia",
                            Name = "Noize MC"
                        },
                        new
                        {
                            Id = 6,
                            AlternativeNames = "Zdob şi Zdub",
                            Info = "Moldova",
                            Name = "Zdob si Zdub"
                        },
                        new
                        {
                            Id = 7,
                            Info = "Ukraine",
                            Name = "Скрябін"
                        },
                        new
                        {
                            Id = 8,
                            AlternativeNames = "Танок на майдані Конго",
                            Info = "Ukraine",
                            Name = "ТНМК"
                        },
                        new
                        {
                            Id = 9,
                            Info = "Ukraine",
                            Name = "Тартак"
                        },
                        new
                        {
                            Id = 10,
                            Info = "Austria",
                            Name = "Rocky Leon"
                        },
                        new
                        {
                            Id = 11,
                            Info = "Ukraine",
                            Name = "Перкалаба"
                        },
                        new
                        {
                            Id = 12,
                            Info = "Ukraine",
                            Name = "Карна"
                        },
                        new
                        {
                            Id = 13,
                            AlternativeNames = "Кораллі",
                            Info = "Ukraine",
                            Name = "КораЛЛі"
                        },
                        new
                        {
                            Id = 14,
                            Info = "Ukraine",
                            Name = "Петрос"
                        },
                        new
                        {
                            Id = 15,
                            AlternativeNames = "ВВ",
                            Info = "Ukraine",
                            Name = "Воплі Відоплясова"
                        },
                        new
                        {
                            Id = 16,
                            Info = "Ukraine",
                            Name = "Триставісім"
                        },
                        new
                        {
                            Id = 17,
                            Info = "Ukraine",
                            Name = "Dimicandum"
                        },
                        new
                        {
                            Id = 18,
                            Info = "Germany",
                            Name = "Caliban"
                        },
                        new
                        {
                            Id = 19,
                            Info = "Hungary",
                            Name = "Ektomorf"
                        },
                        new
                        {
                            Id = 20,
                            Info = "Ukraine",
                            Name = "Роллікс"
                        },
                        new
                        {
                            Id = 21,
                            Info = "Ukraine",
                            Name = "Тостер"
                        },
                        new
                        {
                            Id = 22,
                            Info = "Ukraine",
                            Name = "Тінь Сонця"
                        },
                        new
                        {
                            Id = 23,
                            Info = "Ukraine",
                            Name = "Фліт"
                        },
                        new
                        {
                            Id = 24,
                            Info = "Ukraine",
                            Name = "Jinjer"
                        },
                        new
                        {
                            Id = 25,
                            Info = "Ukraine",
                            Name = "Skinhate"
                        },
                        new
                        {
                            Id = 26,
                            Info = "Ukraine",
                            Name = "Ratbite"
                        },
                        new
                        {
                            Id = 27,
                            Info = "Belarus",
                            Name = "Sciana "
                        },
                        new
                        {
                            Id = 28,
                            Info = "Ukraine",
                            Name = "Molfa"
                        },
                        new
                        {
                            Id = 29,
                            Info = "Ukraine",
                            Name = "The Crawls"
                        },
                        new
                        {
                            Id = 30,
                            Info = "Ukraine",
                            Name = "Bandurband"
                        },
                        new
                        {
                            Id = 31,
                            Info = "Ukraine",
                            Name = "Blood Brothers"
                        },
                        new
                        {
                            Id = 32,
                            Info = "Ukraine",
                            Name = "Latur"
                        },
                        new
                        {
                            Id = 33,
                            Info = "Ukraine",
                            Name = "Серцевий напад"
                        },
                        new
                        {
                            Id = 34,
                            Info = "Norway",
                            Name = "Flunk"
                        },
                        new
                        {
                            Id = 35,
                            Info = "Russia",
                            Name = "I Am Waiting For You Last Summer"
                        },
                        new
                        {
                            Id = 36,
                            Info = "Ukraine",
                            Name = "Крихітка"
                        },
                        new
                        {
                            Id = 37,
                            Info = "Russia",
                            Name = "the Retuses"
                        },
                        new
                        {
                            Id = 38,
                            Info = "Ukraine",
                            Name = "Qarpa"
                        },
                        new
                        {
                            Id = 39,
                            Info = "Ukraine",
                            Name = "Один в каное"
                        },
                        new
                        {
                            Id = 40,
                            Info = "Ukraine",
                            Name = "The ВЙО"
                        },
                        new
                        {
                            Id = 41,
                            Info = "Ukraine",
                            Name = "Фіолет"
                        },
                        new
                        {
                            Id = 42,
                            Info = "Ukraine",
                            Name = "Vivienne Mort"
                        },
                        new
                        {
                            Id = 43,
                            Info = "Ukraine",
                            Name = "Плесо"
                        },
                        new
                        {
                            Id = 44,
                            Info = "Ukraine",
                            Name = "Гич Оркестр"
                        },
                        new
                        {
                            Id = 45,
                            Info = "Ukraine",
                            Name = "Acloneofmyown"
                        },
                        new
                        {
                            Id = 46,
                            Info = "Ukraine",
                            Name = "Maiak"
                        },
                        new
                        {
                            Id = 47,
                            Info = "Ukraine",
                            Name = "Lakeway"
                        },
                        new
                        {
                            Id = 48,
                            Info = "Ukraine",
                            Name = "My Atlas"
                        },
                        new
                        {
                            Id = 49,
                            Info = "Ukraine",
                            Name = "Dakh Daughters"
                        },
                        new
                        {
                            Id = 50,
                            Info = "Ukraine",
                            Name = "Illusions"
                        },
                        new
                        {
                            Id = 51,
                            Info = "Ukraine",
                            Name = "Zapaska"
                        },
                        new
                        {
                            Id = 52,
                            Info = "Ukraine",
                            Name = "DrumТиатр"
                        },
                        new
                        {
                            Id = 53,
                            Info = "Ukraine",
                            Name = "O.Torvald"
                        });
                });

            modelBuilder.Entity("SeenLive.Events.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("EventType")
                        .HasColumnType("smallint");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2014, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = (byte)1,
                            LocationId = 5,
                            Name = "Zaxidfest 2014"
                        });
                });

            modelBuilder.Entity("SeenLive.Locations.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "Munster"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            Name = "Katowice"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Rodatychy"
                        });
                });

            modelBuilder.Entity("SeenLive.Locations.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 3,
                            Code = "PL",
                            Name = "Poland"
                        });
                });

            modelBuilder.Entity("SeenLive.Locations.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 3,
                            CountryId = 1,
                            Name = "Жара"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CountryId = 1,
                            Name = "Stereoplaza"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 5,
                            CountryId = 3,
                            Name = "Tauron Arena"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            CountryId = 2,
                            Name = "Zeppelinfeld"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 6,
                            CountryId = 1,
                            Name = "Charivna Dolyna"
                        });
                });

            modelBuilder.Entity("SeenLive.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SeenLive.Visits.VisitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int[]>("SeenBandsIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("BandEntityEventEntity", b =>
                {
                    b.HasOne("SeenLive.Bands.BandEntity", null)
                        .WithMany()
                        .HasForeignKey("BandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeenLive.Events.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SeenLive.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SeenLive.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeenLive.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SeenLive.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeenLive.Events.EventEntity", b =>
                {
                    b.HasOne("SeenLive.Locations.LocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SeenLive.Locations.CityEntity", b =>
                {
                    b.HasOne("SeenLive.Locations.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SeenLive.Locations.LocationEntity", b =>
                {
                    b.HasOne("SeenLive.Locations.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeenLive.Locations.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SeenLive.Visits.VisitEntity", b =>
                {
                    b.HasOne("SeenLive.Events.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeenLive.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
